{"version":3,"sources":["jquery.happyloader.js"],"names":[],"mappings":"CASA,SAAA,GACA,kBAAA,SAAA,OAAA,IAEA,QAAA,UAAA,GAGA,EAAA,SAEA,SAAA,GAeA,QAAA,GAAA,EAAA,GACA,KAAA,QAAA,EACA,KAAA,SAAA,EAAA,KAAA,SACA,KAAA,MAAA,EAAA,QACA,KAAA,QACA,KAAA,aAAA,EAEA,KAAA,QAAA,EAAA,UACA,EAAA,EAAA,EAAA,KAAA,SAAA,KAAA,wBAEA,KAAA,UAAA,EACA,KAAA,MAAA,EAEA,KAAA,QAAA,EAEA,KAAA,OACA,KAAA,cACA,KAAA,qBAsKA,QAAA,KACA,KAAA,KAAA,WACA,EAAA,KAAA,KAAA,UAAA,GAAA,cAIA,QAAA,GAAA,EAAA,GACA,MAAA,YACA,MAAA,GAAA,MAAA,EAAA,YAIA,QAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAjNA,GAAA,GAAA,QAGA,EAAA,cACA,GACA,mBAAA,uBACA,eAAA,mBACA,kBAAA,qBACA,oBAAA,wBACA,OAAA,EACA,SAAA,aAuBA,GAAA,WACA,KAAA,WACA,KAAA,SACA,KAAA,sBAGA,OAAA,WACA,EAAA,UAAA,SAAA,KAAA,QAAA,oBAAA,SAAA,QACA,EAAA,UAAA,SAAA,KAAA,QAAA,mBAAA,IAAA,UAAA,QAAA,SAAA,QACA,EAAA,UAAA,SAAA,KAAA,QAAA,gBAAA,SAAA,IAAA,KAAA,QAAA,oBACA,EAAA,UAAA,SAAA,KAAA,QAAA,qBAAA,KAAA,MAAA,SAAA,IAAA,KAAA,QAAA,qBAGA,UAAA,WACA,GAAA,GAAA,SAAA,IAAA,KAAA,aAAA,KAAA,KAAA,QACA,EAAA,EAAA,QAAA,QACA,EAAA,SAAA,EAAA,EAAA,IACA,GAAA,IAAA,KAAA,QAAA,gBAAA,MAAA,GAAA,GAAA,SAAA,MAAA,GAAA,IAAA,EAAA,MAAA,WACA,EAAA,IAAA,KAAA,QAAA,qBAAA,KAAA,EAAA,MACA,QAGA,aAAA,WACA,EAAA,IAAA,KAAA,QAAA,gBAAA,UAAA,KAAA,EAAA,MAAA,WACA,EAAA,IAAA,KAAA,QAAA,mBAAA,SACA,EAAA,IAAA,KAAA,QAAA,oBAAA,SAAA,QAAA,GAAA,IAAA,EAAA,MAAA,WACA,EAAA,IAAA,KAAA,QAAA,oBAAA,SAEA,GAAA,KAAA,QAAA,OACA,QAAA,IAAA,eAEA,OAEA,KAAA,QAAA,YACA,QAGA,KAAA,aAIA,mBAAA,WACA,GAAA,GAAA,KAAA,SAAA,KAAA,gBACA,GAAA,EAAA,IAAA,KAAA,SAGA,KAAA,GAFA,GAAA,EAAA,OAEA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,UAAA,EAAA,GAGA,OAAA,MAAA,KAAA,QAAA,GACA,KAAA,gBACA,IAGA,KAAA,aAAA,KAAA,WAEA,GAAA,KAAA,QAAA,OACA,QAAA,IAAA,kBAAA,KAAA,SAKA,UAAA,SAAA,GACA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,QAAA,cACA,EAAA,EAEA,IAAA,QAAA,EAAA,IAAA,qBAAA,GAAA,EAAA,GAAA,UAAA,OAAA,IACA,EAAA,EAAA,KAAA,OACA,QAAA,EAAA,cAEA,QAAA,QAAA,OAAA,EAAA,GAAA,QAAA,QAAA,QAAA,EAAA,GAAA,QAAA,QAAA,OAAA,EAAA,GAAA,QAAA,QAAA,OAAA,EAAA,GAEA,MADA,MAAA,KAAA,KAAA,IACA,CAIA,IAAA,SAAA,EAAA,IAAA,oBAAA,CAGA,GAFA,EAAA,EAAA,IAAA,oBAEA,EAAA,QAAA,YAAA,EAAA,EACA,OAAA,CAGA,IAAA,EAAA,QAAA,QAAA,EAAA,EACA,OAAA,CASA,IANA,EAAA,EAAA,QAAA,WAAA,IACA,EAAA,EAAA,QAAA,SAAA,IACA,EAAA,EAAA,QAAA,QAAA,IACA,EAAA,EAAA,QAAA,MAAA,IAGA,EAAA,QAAA,KAAA,EAAA,EAAA,CAGA,IAAA,GAFA,GAAA,EAAA,MAAA,KAEA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,KAAA,KAAA,KAAA,EAAA,GAAA,QAAA,eAAA,IAGA,QAAA,EAIA,MADA,MAAA,KAAA,KAAA,IACA,IAIA,UAAA,SAAA,GACA,EAAA,GAAA,aAAA,EAAA,MAAA,WACA,KAAA,kBAAA,GAEA,GAAA,KAAA,QAAA,OACA,QAAA,IAAA,eAEA,QAGA,kBAAA,WACA,KAAA,cACA,MAAA,KAAA,MAEA,MAAA,UAAA,KAAA,cAEA,KAAA,cAAA,KAAA,KAAA,QACA,KAAA,gBAIA,aAAA,WAIA,IAAA,GAHA,GAAA,KAAA,KAAA,OACA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,WACA,EAAA,KAAA,MAAA,KAAA,KAAA,IAAA,SAAA,IAAA,KAAA,QAAA,mBACA,KAAA,UAAA,IAIA,YAAA,aAGA,mBAAA,cAIA,EAAA,GAAA,GAAA,SAAA,GAMA,MAJA,GAAA,EAAA,EAAA,MACA,EAAA,EAAA,QAAA,OAAA,GACA,EAAA,EAAA,QAAA,SAAA,GAEA,KAAA,KAAA,WACA,EAAA,KAAA,KAAA,UAAA,IACA,EAAA,KAAA,KAAA,UAAA,EACA,GAAA,GAAA,KAAA","file":"jquery.happyloader.min.js","sourcesContent":["/* ========================================================================\r\n * happyloaders: jquery.happyloader.js v1.0.0\r\n * ========================================================================\r\n * Copyright 2013 Happycms.ru\r\n * Licensed under the MIT license.\r\n * http://www.opensource.org/licenses/mit-license.php\r\n * ======================================================================== \r\n */\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory);\r\n    } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    \r\n    var VERSION = '1.0.0';\r\n    \r\n    // Create the defaults once\r\n    var happyloader = 'happyloader',\r\n        defaults = {\r\n            happyloaderOverlay : 'happy-loader-overlay',\r\n            happyloaderBar : 'happy-loader-bar',\r\n            happyloaderImages : 'happyloader-images',\r\n            happyloaderInformer : 'happy-loader-informer',\r\n            debug : false,\r\n            callback: function() {},\r\n        };\r\n\r\n    function Plugin( element, options ) {\r\n        this.element = element;\r\n        this.$element = $(this.element);\r\n        this.$body = $('body');\r\n        this.urls = [];\r\n        this.imageCounter = 0;\r\n\r\n        this.options = $.extend( {\r\n        }, defaults, options, $(this.element).data('happyloader-options')) ;\r\n        \r\n        this._defaults = defaults;\r\n        this._name = happyloader;\r\n        \r\n        this.version = VERSION;\r\n\r\n        this.init();\r\n        this.bindMethods();\r\n        this.bindEventListeners();\r\n    }\r\n\r\n    Plugin.prototype = {\r\n        init: function() {\r\n            this.render();  \r\n            this.findImagesElements();  \r\n        },\r\n\r\n        render: function(){ \r\n            $('<div/>').addClass(this.options.happyloaderOverlay).appendTo('body');\r\n            $('<div/>').addClass(this.options.happyloaderImages).css('display', 'none').appendTo('body');\r\n            $('<div/>').addClass(this.options.happyloaderBar).appendTo('.'+this.options.happyloaderOverlay);\r\n            $('<div/>').addClass(this.options.happyloaderInformer).html('0%').appendTo('.'+this.options.happyloaderOverlay);\r\n        },\r\n        \r\n        renderBar: function(){\r\n            var percentage = parseInt(this.imageCounter*100/this.urls.length);\r\n            var windowWidth = $(window).width();\r\n            var width = parseInt((percentage * windowWidth)/100);\r\n            $('.'+this.options.happyloaderBar).stop(true, true).animate({'width' : width}, 300, $.proxy(function(){\r\n                $('.'+this.options.happyloaderInformer).html(percentage+'%');    \r\n            }, this));\r\n        },\r\n        \r\n        removeLoader: function(){\r\n            $('.'+this.options.happyloaderBar).promise().done($.proxy(function() {\r\n                $('.'+this.options.happyloaderImages).remove();\r\n                $('.'+this.options.happyloaderOverlay).animate({'opacity' : 0}, 300, $.proxy(function(){\r\n                    $('.'+this.options.happyloaderOverlay).remove();    \r\n                    \r\n                    if(this.options.debug == true){\r\n                        console.log('end loader');    \r\n                    }\r\n                }, this));\r\n                \r\n                this.options.callback();\r\n            }, this));\r\n        },\r\n        \r\n        draw: function() {\r\n\r\n        },\r\n        \r\n        findImagesElements: function(){\r\n            var elements = this.$element.find('*:not(script)');\r\n            elements = elements.add(this.$element);\r\n            var elementsSize = elements.size();\r\n            \r\n            for(var i = 0; i < elementsSize; i++){\r\n                this.findImage(elements[i]);  \r\n            }     \r\n            \r\n            if(this.urls.length <= 0){\r\n                this.removeLoader();\r\n                return true;    \r\n            }\r\n            \r\n            this.createImages(this.urls);\r\n            \r\n            if(this.options.debug == true){\r\n                console.log('end find images', this.urls);    \r\n            }\r\n             \r\n        },\r\n        \r\n        findImage: function(element){\r\n            var element = $(element);\r\n            var tag = element[0].tagName.toLowerCase();\r\n            var url = '';\r\n            \r\n            if(element.css('background-image') == 'none' && element.is('[src]') == true && tag == 'img' ){\r\n                url = element.attr('src');\r\n                findUrl = url.toLowerCase();\r\n\r\n                if(findUrl.indexOf('jpg') + 1 > 0 || findUrl.indexOf('jpeg') + 1 > 0 || findUrl.indexOf('png') + 1 > 0 || findUrl.indexOf('gif') + 1 > 0){\r\n                    this.urls.push(url);\r\n                    return true;     \r\n                }\r\n            }\r\n            \r\n            if(element.css('background-image') !== 'none'){\r\n                url = element.css('background-image'); \r\n                \r\n                if(url.indexOf('gradient') + 1 > 0){\r\n                    return false;\r\n                }\r\n\r\n                if(url.indexOf('data') + 1 > 0){\r\n                    return false;\r\n                }\r\n                \r\n                url = url.replace(/url\\(\\\"/g, \"\");\r\n                url = url.replace(/url\\(/g, \"\");\r\n                url = url.replace(/\\\"\\)/g, \"\");\r\n                url = url.replace(/\\)/g, \"\");\r\n                \r\n                /* проверка на multi images */\r\n                if(url.indexOf(',') + 1 > 0){\r\n                    var a = url.split(',');\r\n                    \r\n                    for(var i = 0, len = a.length; i < len; i++){\r\n                        this.urls.push(a[i].replace(/^\\%20|\\%20$/g, ''));    \r\n                    }\r\n                    \r\n                    return true;\r\n                }\r\n\r\n                this.urls.push(url); \r\n                return true;  \r\n            }\r\n        },\r\n        \r\n        loadImage: function(element){\r\n            element.on('load error', $.proxy(function () {\r\n                 this.completeImageLoad(element);\r\n\r\n                 if(this.options.debug == true){\r\n                    console.log('load image');    \r\n                 }\r\n            }, this));           \r\n        },\r\n        \r\n        completeImageLoad: function(element){\r\n            this.imageCounter++;\r\n            var imageSize = this.urls.length;\r\n            \r\n            this.renderBar(this.imageCounter);\r\n            \r\n            if(this.imageCounter >= this.urls.length){\r\n                this.removeLoader();    \r\n            }    \r\n        },\r\n        \r\n        createImages: function(){\r\n            var urlsSize = this.urls.length;\r\n            var image = '';\r\n            \r\n            for(var i = 0; i < urlsSize; i++){\r\n                image = $('<img />');\r\n                image.attr('src', this.urls[i]).appendTo('.'+this.options.happyloaderImages);\r\n                this.loadImage(image);    \r\n            }\r\n        },\r\n        \r\n        bindMethods: function(){\r\n        },\r\n        \r\n        bindEventListeners: function(){\r\n        }\r\n    };\r\n\r\n    $.fn[happyloader] = function ( options ) {\r\n        // global events\r\n        onWindowResize = bind(onWindowResize, this); \r\n        addEventListener($(window), 'load', onWindowResize); \r\n        addEventListener($(window), 'resize', onWindowResize);\r\n        \r\n        return this.each(function () {\r\n            if (!$.data(this, \"plugin_\" + happyloader)) {\r\n                $.data(this, \"plugin_\" + happyloader,\r\n                new Plugin( this, options ));\r\n            }\r\n        });\r\n    };\r\n\r\n    function onWindowResize(e){\r\n        this.each(function () {\r\n            $.data(this, \"plugin_\" + happyloader).renderBar();  \r\n        });\r\n    }\r\n    \r\n    function bind(fn, context) {\r\n        return function() {\r\n            return fn.apply(context, arguments);\r\n        };\r\n    };\r\n        \r\n    function addEventListener(element, type, callback) {\r\n        element.on(type, callback);\r\n    };\r\n        \r\n    function removeEventListener(element, type, callback) {\r\n        element.off(type, callback);\r\n    };\r\n}));"],"sourceRoot":"/source/"}